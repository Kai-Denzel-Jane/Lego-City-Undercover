// This script is the Taxi Mission Handler - when you jump into a Taxi (at the moment a
// specific one, later on it should be any of them) it will spawn the first customer. That
// customer will then further the mission by getting picked up and dropped off.
// If the player gets out of the taxi they have 5 seconds to get back in it before the 
// script will abort, and any customer who is in the taxi will get out.
// We execute this ONCE only. Couples the Taxi up and then heads to WaitForTaxiMission

HotSpot hMissionStart("");
// Mission vehicle spawn locations
Locator lTaxiSpawn("");

// Characters used in the mission
Character cPlayer1("player1");
Character cPlayer2("player2");
Character cMissionPlayer("");
Character cTaxi("");
Character cPassengerCurrent("");

Global Locator gLocMoveTo("");

// Vehicle setup strings
Text tVehicleType("Taxi");
Text tCharType("");

// Declaration strings - used to declare area and locator vars in the mission loop as the mission stage progresses / iterates
Text tSpawnLocator("BM_Taxi_SFR_01_Customer");
//Text tPickupArea("TaxiMissionCustomerPickupArea"); // CANNOT SEE AREAS RELATING TO THESE IN THE LED. REMOVE IS UNNECESSARY
Text tPickupLocator("BM_Taxi_SFR_01_PU"); 
//Text tDropOffArea("TaxiMissionCustomerDropOffArea"); // CANNOT SEE AREAS RELATING TO THESE IN THE LED. REMOVE IS UNNECESSARY
Text tDropOffLocator("BM_Taxi_SFR_01_DO");

Text tPickupHotspot("HotSpot_SideMission_Taxi_Pickup_SFResidentialStuds_");
Text tDropOffHotspot("HotSpot_SideMission_Taxi_DropOff_SFResidentialStuds_");

// Used to reference correct stud complex gizmos
Text tPickup("_pickup_");
Text tDropOff("_dropoff_");

// Response text based on player performance
Text tGood_01("MISSION_TAXI_CUSTOMER_RESPONSE_GOOD_01");
Text tNeutral_01("MISSION_TAXI_CUSTOMER_RESPONSE_FAIR_01");
Text tPoor_01("MISSION_TAXI_CUSTOMER_RESPONSE_POOR_01");

// Temporary text to differentiate between different taxi varients
Text tPrompt("MISSION_TAXI_CHARACTER_PROMPT");

Text tReturnState("");  // State the mission returns to


Global Number nTaxiStage(0);
Global Number nTaxiDropOff(0);
Number nMaxStage(2); // Number of passengers / loops of pickups
Number nTimeLimit(600); // Seconds allowed for the mission to be completed within

// Definitions needed for new timer system and two tier stud awards
Number nTaxiStage01Timer(50);
Number nTaxiStage02Timer(70);
Number nTaxiStage03Timer(70);
Number nTaxiStage04Timer(70);
Number nTaxiStage05Timer(70);

Number nBonusThreshold(0);
Number nTimeMultiplier(500);
Number nTimeBonusMultiplier(1000);
Number nStudAward(0);
Number nHeroTarget(10000);
Number nPassengerSet(0);

Number nAbortDistance(8);		// Distance from vehicle the mission will be aborted.

// Timers
Timer scripttimer(0);
Global Timer globalTaxiStudMissionTimer(0);

WorldLevel wlCity ("Lego_City");
WorldLevel wlMissionStart("SF_Residential_1122");
WorldLevel wlPassenger1("SF_Residential_0921");
WorldLevel wlPassenger2("SF_Residential_0919");
WorldLevel wlPassenger3("SF_Residential_0919");
WorldLevel wlPassenger4("SF_Residential_0919");
WorldLevel wlPassenger5("SF_Residential_0919");

WorldLevel wlCurrentPassenger("SF_Residential_0921");

// Objective OBJ_Abort("Abort_Check");

/////////////////////////////////////////////////////////////////
// Functions
/////////////////////////////////////////////////////////////////
Function LevelEnter (WorldLevel level)
{
	
	if ( level == wlCity )
	{
		if (!cPlayer1)
		{
			cPlayer1 = "player1";
		};
	};
};


Function CheckInVehicle( Text tStateName )
{
	if ( cMissionPlayer.GetVehicle() != cTaxi )
	{
		tReturnState = tStateName;
		goto WatchDistance();
	};
};



/////////////////////////////////////////////////////////////////////////////////
////  SETUP STAGE
/////////////////////////////////////////////////////////////////////////////////

State Setup()
{
	Conditions
	{
		if ( wlCity.IsLoaded() )
		{
			goto EnableHotspot();
		};
	};	
	Actions
	{
	};
};


State EnableHotspot()
{
	Conditions
	{
	};
	
	Actions
	{
		hMissionStart = "BM_Taxi_SFR_01_StudTrailStart";

		lTaxiSpawn = "BM_Taxi_SFR_01_StudTrailSpawn";
		
		// setup stuff...
		// [NOTE: stuff done here must be un-done in Cleanup()]
		
		hMissionStart.SetHaloVisible(false);
		hMissionStart.SetIcon("Bonus"); 
		hMissionStart.SetActive(true);
		hMissionStart.NoCondition();
		goto WaitForReturnToTile();
	};
};




// Wait for the player to be in the tile
State WaitForReturnToTile()
{
	Conditions
	{
		if( wlMissionStart.IsLoaded() ) 
		{ 
			goto WaitForPlayerInTaxi(); 
		};
	};
	Actions
	{
		// OBJ_Abort.Release();
		if ( cTaxi ) 
		{ 
			if ( cPlayer1.GetVehicle() != cTaxi  AND  cPlayer2.GetVehicle() != cTaxi ) 
			{	
				cTaxi.Deactivate();
				cTaxi = "";					
			};
		};	
	};	
};


// Activate, then await the player to enter the taxi.
State WaitForPlayerInTaxi()
{
	Bool bPrompt(false); // Number used for latching character prompt
	Bool bPromptSecondPlayer(false);
	Bool bNoTargetSet(false);
	Gizmo gCharacterPickup("c_TaxiDriverCharkit");
	Number nDistance(1.5);
	Conditions
	{
//		 Check to see if the player enters the mission's vehicle		
		if ( wlCity.IsLoaded() )
		{
			if ( cTaxi )
			{
				if ( cPlayer1 )
				{
					if( cPlayer1.GetVehicle() == cTaxi ) 				
					{ 
						if (MissionFocus(cPlayer1))
						{
							UI_RemoveMissionHelpText(); 
							cMissionPlayer = cPlayer1;
							goto GiveMissionPrompts(); 
						};
					};
				}
				else
				{
					cPlayer1 = "player1";
				};
				
				if ( cPlayer2 )
				{
					if( cPlayer2.GetVehicle() == cTaxi ) 
					{ 
						if (MissionFocus(cPlayer2))
						{
							UI_RemoveMissionHelpText(); 
							cMissionPlayer = cPlayer2;
							goto GiveMissionPrompts(); 
						};
					};
				}
				else
				{
					cPlayer2 = "player2";
				};
			};
			
			if( !wlMissionStart.IsLoaded() ) 
			{
				goto WaitForReturnToTile(); 
			};
			
			
			if ( gCharacterPickup.GetOutput(0)  AND  !Mission_IsFlagSet(#characterUnlocked) )
			{
				Mission_SetFlag( #characterUnlocked, true );
				
				if ( cTaxi )
				{
					if (cPlayer1.DistanceToXZ(cTaxi) < nDistance)
					{
						UI_RemoveMissionHelpText(cPlayer1);			
					};
					
					if (cPlayer2.DistanceToXZ(cTaxi) < nDistance)
					{
						UI_RemoveMissionHelpText(cPlayer2); 			
					};
				};
				
				//cTaxi.SetTaggable(true);	//  RE-ENABLE ONCE SETTAGGABLE WORKS //chrysp: use SetLocked(false) instead
				bNoTargetSet = false;
	
			};
			
			if ( cTaxi  AND  !Mission_IsFlagSet(#characterUnlocked) ) //  checks to see if the taxi exists and the mission value has yet to be flagged as true.
			{
				if ( cPlayer1.DistanceToXZ(cTaxi) < nDistance  AND  !bPrompt )
				{					
					UI_SetMissionHelpText(tPrompt, 6, cPlayer1 );
					bPrompt = true;		
				}
				elseif ( cPlayer1.DistanceToXZ(cTaxi) > nDistance  AND  bPrompt )
				{					
					UI_RemoveMissionHelpText(cPlayer1); 
					bPrompt = false;
				};
				
				if ( cPlayer2.DistanceToXZ(cTaxi) < nDistance  AND  !bPromptSecondPlayer )
				{
					bPromptSecondPlayer = true;
					UI_SetMissionHelpText(tPrompt, 6, cPlayer2 );
				}
				elseif ( cPlayer2.DistanceToXZ(cTaxi) > nDistance  AND  bPromptSecondPlayer )
				{
					bPromptSecondPlayer = false;
					UI_RemoveMissionHelpText(cPlayer2);
				};					
			};			
		};		
	};
	Actions
	{
		Number nDirection(0);
		Number nDirectionSeat(0);
		
		// OBJ_Abort.Prepare();
		
		UI_LoadMissionPrompt("Hud_Mission_Bonus_Taxi"); 
		
		
		if ( !cTaxi  ) 
		{
			nDirection = lTaxiSpawn.GetDirection();
			
			cTaxi = CreateAIVehicle( tVehicleType, "Taxi", lTaxiSpawn, nDirection );
			Wait();
			if ( !Mission_IsFlagSet(#characterUnlocked) )
			{
				//cTaxi.SetTaggable(false);  //  RE-ENABLE ONCE SETTAGGABLE WORKS //chrysp: use SetLocked(true) instead
			};
			cTaxi.SetParked(true);				
		};		
	};
};


// Checks to see if the player starts the mission or not - handles accepting the mission
State GiveMissionPrompts()
{
	// Number n(0);
	
	Conditions
	{
//		 Gets out of the vehicle before pressing LB to initiate mission...
		if( cMissionPlayer.GetVehicle() != cTaxi ) 
		{ 
			cTaxi.SetParked(false);
			UI_HideMissionPrompt();
			MissionUnfocus();
			StreamedCharacterRelease("Mission_TaxiDriver");
			goto WaitForPlayerInTaxi(); 
		};

		if( PlayerPressedButton(cMissionPlayer, "A") ) 
		{ 
			if ( cPlayer1 == cMissionPlayer )
			{
				 PlayerSetCharacter( 1, "Mission_TaxiDriver");
			}
			else
			{
				 PlayerSetCharacter( 2, "Mission_TaxiDriver");
			};
			
			MissionActivate();
		};
	};
	Actions
	{
		UI_ShowMissionPrompt("Hud_Mission_Bonus_Taxi", "MISSION_INSTRUCTIONS_TAXI", "MISSION_PROMPT", "MISSION_TITLE_TAXI");
		StreamedCharacterPreLoad("Mission_TaxiDriver");		
	};
};




/////////////////////////////////////////////////////////////////////////////////
/////  Cleanup
/////////////////////////////////////////////////////////////////////////////////

State Cleanup()
{
	Actions
	{
		if (wlCIty.IsLoaded())
		{
			// cleanup stuff...
			if ( cTaxi )
			{
				cTaxi.Deactivate();
				cTaxi = "";
			};
			
			if ( cPassengerCurrent )
			{
				cPassengerCurrent.SetScript("KillOffScreen");
				cPassengerCurrent = "";
			};

			if ( hMissionStart )
			{
				hMissionStart.SetActive(false);
			};
		
			if ( wlCity.IsLoaded() )
			{
				nTaxiStage = 0;
				nTaxiDropOff = 0;
			};
		};
		
		if ( MissionWasAborted() )
		{
			SetSatNavDestination();
		};
		
		if ( MissionWasCompleted() )
		{
			SetSatNavDestination();
		};
		
		
		// All tidy, let the game know...
		MissionCleanupEnd();
	};
};



/////////////////////////////////////////////////////////////////////////////////
//// Mission Loop
/////////////////////////////////////////////////////////////////////////////////

Function ParkTaxi()
{
	goto EnsureInsideTaxi();
	//cTaxi.SetParked(true);
	//goto HeadToDropOff();
};

Function ParkTaxiDropOff()
{	
	goto DropOffCustomer();	
};

State Begin()
{
	Actions
	{
			UI_StartMission();
			hMissionStart.Trigger();
			cTaxi.SetParked(false);				
			UI_SetHeroBarMax(nHeroTarget);
			nTaxiStage = 1;
			// OBJ_Abort.ScriptGoto("Begin");
			goto StageSetup();	
	};
};


// States below here comprise the mission loop

State StageSetup()
{
	HotSpot hPickup( tPickupHotspot + nTaxiStage.ToText("int 2") );
	Locator lPickUp( "" + tPickupLocator + nTaxiStage.ToText("int 2")  );	
	Conditions
	{
	};
	Actions
	{
		
		// Timelimit, studs 
		
		if (nTaxiStage == 1)
		{
			nTimeLimit = nTaxiStage01Timer;
			wlCurrentPassenger = wlPassenger1;
		}		
		elseif (nTaxiStage == 2)
		{
			nTimeLimit = nTaxiStage02Timer;
			wlCurrentPassenger = wlPassenger2;
		}
		elseif (nTaxiStage == 3)
		{
			nTimeLimit = nTaxiStage03Timer;
			wlCurrentPassenger = wlPassenger3;
		}
		elseif (nTaxiStage == 4)
		{
			nTimeLimit = nTaxiStage04Timer;
			wlCurrentPassenger = wlPassenger4;
		}
		elseif (nTaxiStage == 5)
		{
			nTimeLimit = nTaxiStage05Timer;
			wlCurrentPassenger = wlPassenger5;
		};
		
		
		// UI Setup
		
		hPickup.SetActive(true);
		hPickup.ScriptResponse("ParkTaxi");
		hPickup.SetIcon("Bonus"); 
		SetSatNavDestination( lPickUp );
		
		if ( nTaxiStage != 1 )
		{
			UI_SetMissionCounter( (nTaxiStage - 1), nMaxStage, false ) ;
			UI_ShowMissionCounter( true );
			Wait(1.5);
			UI_ShowMissionCounter( false );
		};		
				
		globalTaxiStudMissionTimer = 0;
		UI_StopHUDTimer(); 
		UI_ShowHUDTimer(false);
		UI_SetHUDTimer( nTimeLimit, 1, globalTaxiStudMissionTimer );
		UI_ShowHUDTimer(true);		
		
		Text t("MISSION_TAXI_DIRECTIONS_PICKUP_");
		t = t + nTaxiStage.ToText("int 2");
		UI_RadioCall( true, 6 );
		Wait(0.25);
		UI_SetMissionHelpText( t, 5 );				

		goto HeadToCustomer();
	}; 
};

State HeadToCustomer( )
{
	Conditions
	{
		if ( wlCurrentPassenger.IsLoaded() )
		{
			goto SpawnCustomer();
		};	
		
		CheckInVehicle("HeadToCustomer");

	};

	Actions
	{		
	};
};

// Spawn the customer
State SpawnCustomer( )
{
	Locator lSpawn( "" + tSpawnLocator + nTaxiStage.ToText("int 2") );
	Number 	n(0);
	Text 	tType01("BusinessMan");
	Text 	tType02("ConstructionWorker");
	Text 	tType03("Male01");
	Text 	tType04("collect_nurse");
	Conditions
	{
	};
	Actions
	{
		
		if (nPassengerSet == 0)
		{
			n = RandomInt( 1, 4 );
			if ( n == 1 ) { tCharType = tType01; }
			elseif ( n == 2 ) { tCharType = tType02; }
			elseif ( n == 3 ) { tCharType = tType03; }
			elseif ( n == 4 ) { tCharType = tType04; }
			else { tCharType = tType01; };		
		
			Position pCabPos( cTaxi );
			//gLocMoveTo = pCabPos;
		
			tCharType = tType01;  // REMOVE WHEN ISSUE OF CHARACTERS GETTING INTO VEHICLES IS SORTED
			nPassengerSet = 1;
		};
		n = lSpawn.GetDirection();
		cPassengerCurrent = CreateAICharacter( tCharType, "Pedestrian",  lSpawn, n);	
		cPassengerCurrent.SetZoneAbility(#include, #A, #B );	
		
		goto CustomerFollowTaxi();
	};
};


State CustomerFollowTaxi( )
{
	Locator lSpawn( "" + tSpawnLocator + nTaxiStage.ToText("int 2") );
	Locator lMoveTo( "" );
	Number n(1);
	Number z(0);
	
	Conditions
	{

		if ( cPassengerCurrent.GetVehicle( ) != cTaxi  AND  cMissionPlayer.DistanceToXZ( lSpawn ) > 10 AND n == 0 ) 
		{ 
			cPassengerCurrent.MoveTo( lSpawn, 1 );
			n = 1;
		};
		
		if (n == 1 AND cPassengerCurrent.GetVehicle() != cTaxi AND cPassengerCurrent.DistanceToXZ( cMissionPlayer ) < 10)
		{
			// cPassengerCurrent.FollowCharacter( cTaxiSeat );		 // THIS HAS YET TO BE IMPLEMENTED BY CODE
			n = 0;
		};
		
		if ( !wlCurrentPassenger.IsLoaded() )
		{
			cPassengerCurrent.Kill();
			goto HeadToCustomer();
		};

		if ( cPassengerCurrent.DistanceToXZ( cMissionPlayer ) < 3.5 )
		{
			z = cTaxi.GetSpeed();
			if( z <= 1)
			{
				goto EnsureInsideTaxi();
			};
		};
		
		CheckInVehicle("CustomerFollowTaxi");
		
	};
	Actions
	{
	//cPassengerCurrent.FollowCharacter( cTaxiSeat );		 // THIS HAS YET TO BE IMPLEMENTED BY CODE	
	};
};


State EnsureInsideTaxi( )
{
	Timer timeLoop(0);
	Conditions 
	{	
		if ( cPassengerCurrent.GetVehicle() == cTaxi  )
		{
			goto HeadToDropOff();
		};
		
		if ( timeLoop > 5 )
		{
			goto EnsureInsideTaxi();
		};
	};
	Actions
	{
		cTaxi.SetParked(true);
		//cPassengerCurrent.TakeOver( cTaxiSeat );
		//cPassengerCurrent.EnterVehicle(cTaxi, "seatXYZ"); //chrysp: fixup the seat here
	};
};


State HeadToDropOff( )
{
	Locator lDropOff( "" + tDropOffLocator + nTaxiStage.ToText("int 2") );
	HotSpot hDropOff( tDropOffHotspot + nTaxiStage.ToText("int 2") );
	HotSpot hPickup( tPickupHotspot + nTaxiStage.ToText("int 2") );
	Actions
	{
		// Disable studs from previous route
		nTaxiDropOff = nTaxiDropOff + 1;
		
		
		cTaxi.SetParked(false);
		Text t("MISSION_TAXI_DIRECTIONS_DROPOFF_");
		t = t + nTaxiStage.ToText("int 2");
		UI_SetMissionHelpText( t, 5 );
		
		hPickup.SetActive(false);
		hDropOff.SetActive(true);
		hDropOff.ScriptResponse("ParkTaxiDropOff");
		hDropOff.SetIcon("Bonus"); 
		SetSatNavDestination( lDropOff );
		goto AwaitDropOffArrival();
		//  REMOVE THIS ONCE WE CAN RELEASE CHARACTERS TO THE CITY AS AMBIENT CHARACTERS
	};
};

State AwaitDropOffArrival( )
{
	Conditions
	{
		CheckInVehicle("AwaitDropOffArrival");
	};
};



State DropOffCustomer( )
{
	Locator lDropOff( "" + tDropOffLocator + nTaxiStage.ToText("int 2") );
	Number n(0);
	HotSpot hDropOff( tDropOffHotspot + nTaxiStage.ToText("int 2") );
	Conditions
	{
		n = cTaxi.GetSpeed();
		if( n <= 1)
		{
			hDropOff.SetActive(false);
			//cPassengerCurrent.ReleaseTakeOver(0.5, 1);
			//cPassengerCurrent.ExitVehicle();  //chrysp: fixup the exit position
			goto PassengerResponse();
		};
		
		if ( cPassengerCurrent.GetVehicle() == cTaxi  AND  cMissionPlayer.DistanceToXZ( lDropOff ) > 20 ) 
		{
			goto HeadToDropOff();
		};
		
		CheckInVehicle("DropOffCustomer");
	};
	Actions
	{
		
	};
};


State Reward( )
{
	Conditions
	{
	};
	Actions
	{	
		// Award the player based on the time taken
		Number nTotal(0);
		nPassengerSet = 0;
		nBonusThreshold = nTimeLimit / 4;
		nStudAward = nTimeLimit - globalTaxiStudMissionTimer;

		if (globalTaxiStudMissionTimer < nTimeLimit)
		{
			if (nStudAward > nBonusThreshold)
			{
				nTotal = (nBonusThreshold * nTimeMultiplier);
				ntotal = ntotal + ((nStudAward - nBonusThreshold) * nTimeBonusMultiplier);
				Playergivestuds(nTotal);
			}
			else
			{
				nTotal = nStudAward * nTimeMultiplier;
				Playergivestuds(nTotal);
			};
		};
		goto PassengerResponse();
	};
};

State PassengerResponse( )
{
	Text t("");
	Conditions
	{
	};
	Actions
	{
		if ( globalTaxiStudMissionTimer >= nTimelimit )
		{
			t = tPoor_01; 
		}
		else
		{
			if (nStudAward > nBonusThreshold)
			{
				t = tGood_01; 
			}
			else
			{
				t = tNeutral_01;	
			};
		};	
		// Give customer dialogue feedback (temporary version)
		UI_SetMissionHelpText( t, 4 ); 
		
		cTaxi.SetParked(false);
		UI_StopHudTimer();	
		wait(1);
		goto NextStage();
	};
};

State NextStage( )
{
	Conditions
	{
	};
	Actions
	{	
		// Set up ready for next stage or complete the mission
		
		cPassengerCurrent.SetScript( "KillOffScreen" );  //  REMOVE THIS ONCE WE CAN RELEASE CHARACTERS TO THE CITY AS AMBIENT CHARACTERS 
		if ( nTaxiStage == nMaxStage ) 
		{
			goto MissionEnd();
		}
		else
		{
			nTaxiStage = nTaxiStage + 1;
			goto StageSetup();
		};
	};
};

/////////////////////////////////////////////////////////////////////////////////
// Abandon Mission States
/////////////////////////////////////////////////////////////////////////////////


State WatchDistance( )
{
	Text tOutOfVehiclePrompt("MISSION_TAXI_RETURN_TO_CAB");
	Text tAbandonedVehiclePrompt("MISSION_TAXI_ABANDONED");
	Conditions
	{
		if ( cMissionPlayer.GetVehicle() == cTaxi )
		{
			UI_RemoveMissionMessage();					
			if ( tReturnState == "HeadToCustomer" )  {  goto HeadToCustomer(); }
			elseif ( tReturnState == "CustomerFollowTaxi" )  {  goto CustomerFollowTaxi(); }
			elseif ( tReturnState == "AwaitDropOffArrival" )  {  goto AwaitDropOffArrival(); }
			elseif ( tReturnState == "DropOffCustomer" )  {  goto DropOffCustomer(); };			
		};
		
		if ( cMissionPlayer.DistanceToXZ( cTaxi ) > nAbortDistance )
		{
			UI_SetMissionMessage( tAbandonedVehiclePrompt, 5 );
			MissionAbort();
		};
	};
	Actions
	{
		UI_SetMissionMessage( tOutOfVehiclePrompt );
	};
};





State HandleFailScreen( )
{
	Timer time(0);
	Bool b(false);
	Conditions
	{
		if ( time > 0.1  AND  ( PlayerPressedButton(cMissionPlayer, "A")  OR  PlayerPressedButton("Y") ) AND !b )
		{
			UI_ResetMission();
			goto Reset();
		}
		else
		{
			if ( (b AND !cMissionPlayer.GetVehicle()) OR  PlayerPressedButton(cMissionPlayer, "A")  OR  PlayerPressedButton("Y") )
			{
				UI_ResetMission();
				goto Reset();
			};
		};
		
	};
	Actions
	{
		if ( cMissionPlayer.GetVehicle() ) 
		{
			b = true;
		};	
	};
};



/////////////////////////////////////////////////////////////////////////////////
// Mission Ended
/////////////////////////////////////////////////////////////////////////////////
State MissionEnd( )
{
	Conditions
	{
	};
	Actions
	{
		goto Reset();
	};
};

State Reset( )
{
	Conditions
	{
	};
	Actions
	{
		UI_SetStatsStuds();
		SetSatNavDestination();
		UI_StopHUDTimer();
		UI_ShowHUDTimer(false);	
		cTaxi = "";
		if ( nTaxiStage == nMaxStage ) 
		{
			MissionComplete(); // NEEDS TO CHECK AGAINST MISSION COMPLETE STATUS AND FAIL / END MISSION IF MISSION FAILED / ABANDONED ONCE THAT STATE IS AVAILABLE
		}
		else
		{
			MissionAbort();
		};	
	};
};